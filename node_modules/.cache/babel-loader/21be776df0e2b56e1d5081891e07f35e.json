{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Nlw06\\\\src\\\\pages\\\\AdminRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport deleteImg from \"../assets/images/delete.svg\";\nimport { Button } from '../Components/Button';\nimport { Question } from '../Components/Question';\nimport { RoomCode } from '../Components/RoomCode';\nimport { useRoom } from '../hooks/useRoom';\nimport '../styles/rooms.scss';\nimport { database } from '../services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  // const { user } = useAuth()\n  const history = useHistory();\n  const params = useParams();\n  const roomId = params.id;\n  const {\n    title,\n    questions\n  } = useRoom(roomId);\n\n  async function handleEndRoom() {\n    await database.ref(`rooms/${roomId}`).update({\n      endedAt: new Date()\n    });\n    history.push('/');\n  }\n\n  async function handleDeleteQuestion(questionId) {\n    if (window.confirm('Tem certeza que deseja excluir essa pergunta?')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(RoomCode, {\n            code: roomId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            isOutlined: true,\n            onClick: handleEndRoom,\n            children: \"Encerrar sala\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: question.content,\n            author: question.author,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleDeleteQuestion(question.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: deleteImg,\n                alt: \"Remover pergunta\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this)\n          }, question.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 18\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdminRoom, \"jzegP1eYD/Dzuxb8KiHa++znXtE=\", false, function () {\n  return [useHistory, useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Nlw06/src/pages/AdminRoom.tsx"],"names":["useParams","useHistory","Button","Question","RoomCode","useRoom","database","AdminRoom","history","params","roomId","id","title","questions","handleEndRoom","ref","update","endedAt","Date","push","handleDeleteQuestion","questionId","window","confirm","remove","logoImg","length","map","question","content","author","deleteImg"],"mappings":"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","sourcesContent":["import { useParams, useHistory } from 'react-router-dom'\n\nimport logoImg from '../assets/images/logo.svg';\nimport deleteImg from '../assets/images/delete.svg';\n\nimport { Button } from '../Components/Button';\nimport { Question } from '../Components/Question';\nimport { RoomCode } from '../Components/RoomCode';\nimport { useRoom } from '../hooks/useRoom';\n\nimport '../styles/rooms.scss'\nimport { database } from '../services/firebase';\n\ntype RoomParams = {\n  id: string\n}\n\nexport function AdminRoom() {\n  // const { user } = useAuth()\n  const history = useHistory()\n  const params = useParams<RoomParams>()\n  const roomId = params.id;\n  \n  const { title, questions } = useRoom(roomId)\n\n  async function handleEndRoom() {\n    await database.ref(`rooms/${roomId}`).update({\n      endedAt: new Date(),\n    })\n\n    history.push('/');\n  }\n\n  async function handleDeleteQuestion(questionId: string) {\n    if (window.confirm('Tem certeza que deseja excluir essa pergunta?')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove()\n    }\n  }\n\n  return(\n    <div id=\"page-room\">\n      <header>\n        <div className=\"content\">\n          <img src={logoImg} alt=\"Letmeask\" />\n          <div>\n            <RoomCode code={roomId} />\n            <Button isOutlined onClick={handleEndRoom}>Encerrar sala</Button>\n          </div>\n        </div>\n      </header>\n\n      <main>\n        <div className=\"room-title\">\n          <h1>Sala {title}</h1>\n          { questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\n        </div>\n\n        <div className=\"question-list\">\n        {questions.map(question => {\n          return <Question \n            key={question.id}\n            content={question.content} \n            author={question.author} \n            >\n              <button\n                type=\"button\"\n                onClick={() => handleDeleteQuestion(question.id)}\n              >\n                <img src={deleteImg} alt=\"Remover pergunta\" />\n              </button>\n            </Question>\n        })}\n        </div>\n      </main>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}
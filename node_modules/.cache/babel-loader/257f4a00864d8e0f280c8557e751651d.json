{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Nlw06\\\\src\\\\pages\\\\Room.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\nimport '../styles/rooms.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Room() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const params = useParams();\n  const [newQuestion, setNewQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState();\n  const roomId = params.id;\n  useEffect(() => {\n    console.log(roomId);\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    });\n  }, [roomId]);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: roomId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendQuestion,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"O que voc\\xEA quer perguntas?\",\n          onChange: event => setNewQuestion(event.target.value),\n          value: newQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-footer\",\n          children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: user.avatar,\n              alt: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Para enviar uma pergunta, \", /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"fa\\xE7a seu login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 47\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !user,\n            children: \"Enviar pergunta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), JSON.stringify(questions)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Room, \"gMUdxVHxs1lVv4BQmw/xNlB4ujE=\", false, function () {\n  return [useAuth, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Nlw06/src/pages/Room.tsx"],"names":["useEffect","useState","useParams","Button","RoomCode","useAuth","database","Room","user","params","newQuestion","setNewQuestion","questions","setQuestions","title","setTitle","roomId","id","console","log","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","value","content","author","isHighlighted","isAnswered","handleSendQuestion","event","preventDefault","trim","Error","question","name","avatar","push","logoImg","length","target","JSON","stringify"],"mappings":"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","sourcesContent":["import { FormEvent, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom'\n\nimport logoImg from '../assets/images/logo.svg';\n\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\n\nimport '../styles/rooms.scss'\n\ntype FirebaseQuestions = Record<string, {\n  author: {\n    name: string,\n    avatar: string\n  },\n  content: string;\n  isAnswered: boolean,\n  isHighlighted: boolean\n}>\n\ntype Question = {\n  id: string,\n  author: {\n    name: string,\n    avatar: string\n  },\n  content: string;\n  isAnswered: boolean,\n  isHighlighted: boolean\n}\n\ntype RoomParams = {\n  id: string\n}\n\nexport function Room() {\n  const { user } = useAuth()\n  const params = useParams<RoomParams>()\n  const [newQuestion, setNewQuestion] = useState('')\n  const [questions ,setQuestions] = useState<Question[]>([])\n  const [title, setTitle] = useState()\n\n  const roomId = params.id;\n\n  useEffect(() => {\n    console.log(roomId)\n    const roomRef = database.ref(`rooms/${roomId}`)\n\n    roomRef.on('value', room => {\n      const databaseRoom = room.val()\n      const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\n\n      const parsedQuestions = Object.entries(firebaseQuestions).map( ([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered,\n        }\n      })\n\n      setTitle(databaseRoom.title)\n      setQuestions(parsedQuestions)\n    })\n  },[roomId])\n\n  async function handleSendQuestion(event: FormEvent) {\n    event.preventDefault()\n\n    if (newQuestion.trim() === '') {\n      return\n    }\n\n    if(!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    }\n\n    await database.ref(`rooms/${roomId}/questions`).push(question)\n\n    setNewQuestion('')\n  }\n\n  return(\n    <div id=\"page-room\">\n      <header>\n        <div className=\"content\">\n          <img src={logoImg} alt=\"Letmeask\" />\n          <RoomCode code={roomId} />\n        </div>\n      </header>\n\n      <main>\n        <div className=\"room-title\">\n          <h1>Sala {title}</h1>\n          { questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\n        </div>\n\n        <form onSubmit={handleSendQuestion}>\n          <textarea \n            placeholder=\"O que você quer perguntas?\" \n            onChange={event => setNewQuestion(event.target.value)}\n            value={newQuestion}\n          />\n\n          <div className=\"form-footer\">\n            { user ? (\n              <div className=\"user-info\">\n                <img src={user.avatar} alt={user.name} />\n                <span>{user.name}</span>\n              </div>\n            ) : (\n              <span>Para enviar uma pergunta, <button>faça seu login</button>.</span>\n            )}\n            <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\n          </div>\n        </form>\n\n        {JSON.stringify(questions)}\n      </main>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}